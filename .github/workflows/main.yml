name: Compile and Publish to Docker

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

jobs:
  compile:
    name: Compile with rustc nightly
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
    
    steps:
      - name: Clone repository
        uses: actions/checkout@v4.1.7
      
      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install dependencies
        run: |
          sudo apt update 
          sudo apt install -y nasm cmake

      - name: Compile
        run: cargo build --release

      - name: Get the release version from the tag
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build archive
        shell: bash
        run: |
          binary_name="gpt-cat"
          dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            cp "target/release/$binary_name" "$dirname"
          fi
      
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "$dirname.zip" "$dirname"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf "$dirname.tar.gz" "$dirname"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload the binaries
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ASSET }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Echo debug
        run: |
          ls /home/runner/work/gpt-cat/gpt-cat/target/release/gpt-cat
          ls -l
          ls -l ./target
          ls -l ./target/release

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: anivie/gpt-cat:latest

      - name: Echo debug
        run: |
          ls -l
          ls -l ./target
          ls -l ./target/release
